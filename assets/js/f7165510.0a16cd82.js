"use strict";(self.webpackChunkoracle_docs=self.webpackChunkoracle_docs||[]).push([[90],{8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>i});var c=s(6540);const l={},r=c.createContext(l);function d(e){const n=c.useContext(r);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),c.createElement(r.Provider,{value:n},e.children)}},9285:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>c,toc:()=>t});const c=JSON.parse('{"id":"ebsR12-scheduled-concurrent-requests-checker","title":"EBS R12.2.10, Query to get custom schduled Concurrent Requests","description":"Purpose","source":"@site/docs-oracle/ebsR12-scheduled-concurrent-requests-checker.md","sourceDirName":".","slug":"/ebsR12-scheduled-concurrent-requests-checker","permalink":"/Oracle-Docs/docs-oracle/ebsR12-scheduled-concurrent-requests-checker","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"ebsR12-scheduled-concurrent-requests-checker","title":"EBS R12.2.10, Query to get custom schduled Concurrent Requests","sidebar_position":5},"sidebar":"oracleSidebar","previous":{"title":"SQL Macros vs Global Context","permalink":"/Oracle-Docs/docs-oracle/sqlMacro-vs-global-ctx"}}');var l=s(4848),r=s(8453);const d={id:"ebsR12-scheduled-concurrent-requests-checker",title:"EBS R12.2.10, Query to get custom schduled Concurrent Requests",sidebar_position:5},i="Scheduled Concurrent Requests \u2014 Query Guide",o={},t=[{value:"Purpose",id:"purpose",level:2},{value:"Query",id:"query",level:2},{value:"Output columns",id:"output-columns",level:2},{value:"Data sources and joins",id:"data-sources-and-joins",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Dates CTE",id:"dates-cte",level:2},{value:"<code>classInfo</code> layout (Type <code>S</code>)",id:"classinfo-layout-type-s",level:2},{value:"Common pitfall avoided",id:"common-pitfall-avoided",level:3},{value:"Schedule text logic",id:"schedule-text-logic",level:2},{value:"<code>classType = &#39;P&#39;</code> (Periodic)",id:"classtype--p-periodic",level:3},{value:"<code>classType = &#39;S&#39;</code> (Specific Days)",id:"classtype--s-specific-days",level:3},{value:"Performance notes",id:"performance-notes",level:2},{value:"Extensibility",id:"extensibility",level:2}];function a(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"scheduled-concurrent-requests--query-guide",children:"Scheduled Concurrent Requests \u2014 Query Guide"})}),"\n",(0,l.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,l.jsx)(n.p,{children:"Return active scheduled concurrent requests with human-readable schedule text plus last/next run metadata."}),"\n",(0,l.jsx)(n.h2,{id:"query",children:"Query"}),"\n",(0,l.jsxs)(s,{children:[(0,l.jsx)("summary",{children:"Show Code"}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"  WITH\n    base AS ( -- Base Scheduled Concurrent Requests \n        SELECT\n            r.request_id                   AS requestId,\n            p.user_concurrent_program_name AS programName,\n            r.description,\n            s.user_name                    AS requester,\n            c.class_type                   AS classType,\n            c.class_info                   AS classInfo, \n            NVL(r.actual_completion_date, r.last_update_date) AS lastRunDate,   \n            r.requested_start_date                            AS nextRunDate,  \n            flvStatus.meaning                                 AS lastRunStatus\n        FROM\n            apps.fnd_concurrent_requests r\n            JOIN apps.fnd_conc_release_classes c ON c.application_id = r.release_class_app_id\n            AND c.release_class_id = r.release_class_id\n            JOIN apps.fnd_concurrent_programs_tl p ON p.concurrent_program_id = r.concurrent_program_id\n            JOIN apps.fnd_user s ON r.requested_by = s.user_id\n            LEFT JOIN apps.fnd_lookup_values flvStatus\n        ON flvStatus.lookup_type = 'CP_STATUS_CODE'\n        AND flvStatus.lookup_code = r.status_code \n        AND NVL(flvStatus.enabled_flag,'Y') = 'Y' \n        AND flvStatus.start_date_active is not null \n        WHERE\n            r.phase_code = 'P'\n            AND NVL(c.date2, SYSDATE + 1) > SYSDATE\n            AND c.class_type IS NOT NULL\n            AND UPPER(NVL(r.description, p.user_concurrent_program_name)) LIKE 'KSU%'\n    ),\n    dates AS ( -- build day-of-month list once; correlate by requestId(key-preserved)\n        SELECT\n            b.requestId                               AS requestId,\n            LISTAGG(TO_CHAR(lvl), ', ') WITHIN GROUP(\n                ORDER BY\n                    lvl\n            ) AS dates\n        FROM\n            base b\n            CROSS JOIN(\n                SELECT\n                    LEVEL AS lvl\n                FROM\n                    dual CONNECT BY LEVEL <= 31\n            )\n        WHERE\n            b.classType = 'S'\n            AND SUBSTR(b.classInfo, lvl, 1) = '1'\n        GROUP BY\n            b.requestId\n    )\nSELECT\n    b.requestId,\n  NVL2(b.description, b.description || ' (' || b.programName || ')', b.programName) concProg,\n    b.requester,\n--    b.classType,\n--    b.classInfo,\n  lastRunDate,   \n  nextRunDate,  \n  lastRunStatus,\n    DECODE(b.classType, \n      'P', 'Periodic', \n      'S', 'On Specific Days', \n      'X', 'Advanced', b.classType\n  ) AS scheduleType,\n    CASE\n        WHEN b.classType = 'P' THEN -- decode interval:unit:mode\n          'Repeat every ' || SUBSTR(b.classInfo, 1, INSTR(b.classInfo, ':') - 1) || \n      DECODE( SUBSTR( b.classInfo, INSTR(b.classInfo, ':', 1, 1) + 1, 1), \n        'N', ' minutes', \n        'H', ' hours', \n        'D', ' days', \n        'M', ' months'\n      ) \n      || DECODE( SUBSTR( b.classInfo, INSTR(b.classInfo, ':', 1, 2) + 1, 1), \n        'S', ' from the start of the prior run', \n        'C', ' from the completion of the prior run'\n      )\n    WHEN b.classType = 'S' THEN -- specific days\n      NVL2(d.dates, 'Dates: ' || d.dates, NULL)                    -- explicit dates\n      || DECODE(SUBSTR(b.classInfo, 32, 1), '1', 'Last day of month ')\n      -- DOW summary first; if not daily/weekday, fall back to verbose list\n      || NVL(\n        DECODE(SUBSTR(b.classInfo, 33, 7),\n            '1111111', 'Daily',\n            '0111110', 'Every weekday',\n            NULL),\n        DECODE(\n          SIGN(INSTR(SUBSTR(b.classInfo, 33, 7), '1')),\n          1,\n          'Days of week: '\n          || DECODE(SUBSTR(b.classInfo, 33, 1), '1', 'Su ')\n          || DECODE(SUBSTR(b.classInfo, 34, 1), '1', 'Mo ')\n          || DECODE(SUBSTR(b.classInfo, 35, 1), '1', 'Tu ')\n          || DECODE(SUBSTR(b.classInfo, 36, 1), '1', 'We ')\n          || DECODE(SUBSTR(b.classInfo, 37, 1), '1', 'Th ')\n          || DECODE(SUBSTR(b.classInfo, 38, 1), '1', 'Fr ')\n          || DECODE(SUBSTR(b.classInfo, 39, 1), '1', 'Sa ')\n        )\n      )\n      -- Weeks of month: include only if some but not all weeks selected\n      || DECODE(SUBSTR(b.classInfo, 40, 5),\n          '00000', NULL,\n          '11111', NULL,\n          NULL, NULL,\n          'Weeks: '\n          || DECODE(SUBSTR(b.classInfo, 40, 1), '1', '1st ')\n          || DECODE(SUBSTR(b.classInfo, 41, 1), '1', '2nd ')\n          || DECODE(SUBSTR(b.classInfo, 42, 1), '1', '3rd ')\n          || DECODE(SUBSTR(b.classInfo, 43, 1), '1', '4th ')\n          || DECODE(SUBSTR(b.classInfo, 44, 1), '1', '5th ')\n      )\n      -- Months \n      || NVL(\n        DECODE(SUBSTR(b.classInfo, 45, 12), \n        '111111111111', ', Every Month'\n        ),\n                DECODE(\n                    SIGN(INSTR(SUBSTR(b.classInfo, 45, 12), '1')), 1,\n                    'in ' || TRIM(BOTH ' ' FROM\n                          DECODE(SUBSTR(b.classInfo, 45, 1), '1', 'Jan ', '')\n                        || DECODE(SUBSTR(b.classInfo, 46, 1), '1', 'Feb ', '')\n                        || DECODE(SUBSTR(b.classInfo, 47, 1), '1', 'Mar ', '')\n                        || DECODE(SUBSTR(b.classInfo, 48, 1), '1', 'Apr ', '')\n                        || DECODE(SUBSTR(b.classInfo, 49, 1), '1', 'May ', '')\n                        || DECODE(SUBSTR(b.classInfo, 50, 1), '1', 'Jun ', '')\n                        || DECODE(SUBSTR(b.classInfo, 51, 1), '1', 'Jul ', '')\n                        || DECODE(SUBSTR(b.classInfo, 52, 1), '1', 'Aug ', '')\n                        || DECODE(SUBSTR(b.classInfo, 53, 1), '1', 'Sep ', '')\n                        || DECODE(SUBSTR(b.classInfo, 54, 1), '1', 'Oct ', '')\n                        || DECODE(SUBSTR(b.classInfo, 55, 1), '1', 'Nov ', '')\n                        || DECODE(SUBSTR(b.classInfo, 56, 1), '1', 'Dec ', '')\n                ) || '.',\n                ', Every Month'\n        )\n      )\n      /* Sample Data:  \n        classInfo: 0000000000000000000000000000000 0 0111110\t\t\t\t\t\t\tSchedule: Days of week: Mo Tu We Th Fr, will run for all weeks/months if not defined. \n        classInfo: 0000000000000000000000000000000 0 1111111 11111 111111111111\t\t\tSchedule: Days of week: Su Mo Tu We Th Fr Sa \n              Date of Month | LDOM  | Day of Week | Week of Month | Month \n      */\t\n    END AS schedule\nFROM\n    base b\n    LEFT JOIN dates d ON d.requestId = b.requestId\nORDER BY\n    b.description;\n"})})]}),"\n",(0,l.jsx)(n.h2,{id:"output-columns",children:"Output columns"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"requestId"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"concProg"})," \u2014 ",(0,l.jsx)(n.code,{children:"description (programName)"})," if description exists then it's a request set, else ",(0,l.jsx)(n.code,{children:"programName"})]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"requester"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"lastRunDate"})," \u2014 ",(0,l.jsx)(n.code,{children:"NVL(actual_completion_date, last_update_date)"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"nextRunDate"})," \u2014 ",(0,l.jsx)(n.code,{children:"requested_start_date"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"lastRunStatus"})," \u2014 decoded ",(0,l.jsx)(n.code,{children:"CP_STATUS_CODE"})," meaning"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"scheduleType"})," \u2014 ",(0,l.jsx)(n.code,{children:"Periodic | On Specific Days | Advanced | <raw>"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"schedule"})," \u2014 narrative built from ",(0,l.jsx)(n.code,{children:"classInfo"})]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"data-sources-and-joins",children:"Data sources and joins"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"FND_CONCURRENT_REQUESTS r"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"FND_CONC_RELEASE_CLASSES c"})," on release class"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"FND_CONCURRENT_PROGRAMS_TL p"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"FND_USER s"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"FND_LOOKUP_VALUES flvStatus"})," for ",(0,l.jsx)(n.code,{children:"CP_STATUS_CODE"})," meaning"]}),"\n"]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Language and enablement are respected in the status join; only enabled, dated rows with a start date present are used."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"r.phase_code = 'P'"})," - scheduled in manager"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"NVL(c.date2, SYSDATE + 1) > SYSDATE"})," \u2014 still valid"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"c.class_type IS NOT NULL"})," - have schedule"]}),"\n",(0,l.jsxs)(n.li,{children:["Name filter: ",(0,l.jsx)(n.code,{children:"UPPER(NVL(r.description, p.user_concurrent_program_name)) LIKE 'PREFIX%'"})]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"dates-cte",children:"Dates CTE"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"dates"})," emits a comma-separated list of day-of-month values when bits 1\u201331 are set."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"SUBSTR(b.classInfo, lvl, 1) = '1'  -- char compare, no numeric conversion\nLISTAGG(TO_CHAR(lvl), ', ')        -- ordered, compact\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"classinfo-layout-type-s",children:[(0,l.jsx)(n.code,{children:"classInfo"})," layout (Type ",(0,l.jsx)(n.code,{children:"S"}),")"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Bits ",(0,l.jsx)(n.strong,{children:"1\u201331"}),": specific days of month"]}),"\n",(0,l.jsxs)(n.li,{children:["Bit ",(0,l.jsx)(n.strong,{children:"32"}),": last day of month"]}),"\n",(0,l.jsxs)(n.li,{children:["Bits ",(0,l.jsx)(n.strong,{children:"33\u201339"}),": days of week ",(0,l.jsx)(n.code,{children:"Su..Sa"})]}),"\n",(0,l.jsxs)(n.li,{children:["Bits ",(0,l.jsx)(n.strong,{children:"40\u201344"}),": week-of-month ",(0,l.jsx)(n.code,{children:"1st..5th"})]}),"\n",(0,l.jsxs)(n.li,{children:["Bits ",(0,l.jsx)(n.strong,{children:"45\u201356"}),": months ",(0,l.jsx)(n.code,{children:"Jan..Dec"})]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Stored and processed as ",(0,l.jsx)(n.strong,{children:"VARCHAR2"}),". The query never casts to number, so leading zeros are preserved."]}),"\n",(0,l.jsx)(n.h3,{id:"common-pitfall-avoided",children:"Common pitfall avoided"}),"\n",(0,l.jsxs)(n.p,{children:["\u201cfirst day shows as 16\u201d: caused by numeric coercion on a binary-like string. This query uses ",(0,l.jsx)(n.code,{children:"SUBSTR(...)= '1'"})," everywhere and ",(0,l.jsx)(n.code,{children:"INSTR(...,'1')"})," on character data, so no loss of leading zeros and no misreads."]}),"\n",(0,l.jsx)(n.h2,{id:"schedule-text-logic",children:"Schedule text logic"}),"\n",(0,l.jsxs)(n.h3,{id:"classtype--p-periodic",children:[(0,l.jsx)(n.code,{children:"classType = 'P'"})," (Periodic)"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.code,{children:"interval:unit:mode"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"unit"}),": ",(0,l.jsx)(n.code,{children:"N|H|D|M"})," \u2192 minutes|hours|days|months"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"mode"}),": ",(0,l.jsx)(n.code,{children:"S|C"})," \u2192 from start|from completion"]}),"\n",(0,l.jsxs)(n.li,{children:["Output: ",(0,l.jsx)(n.code,{children:"Repeat every <n> <unit> <anchor>"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"classtype--s-specific-days",children:[(0,l.jsx)(n.code,{children:"classType = 'S'"})," (Specific Days)"]}),"\n",(0,l.jsx)(n.p,{children:"Order of assembly:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Explicit dates"}),": if any of bits 1\u201331, output ",(0,l.jsx)(n.code,{children:"Dates: 1, 5, 20"})," etc."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Last day"}),": if bit 32 set, append ",(0,l.jsx)(n.code,{children:"Last day of month"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Day-of-week summary"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["If bits 33\u201339 = ",(0,l.jsx)(n.code,{children:"1111111"})," \u2192 ",(0,l.jsx)(n.code,{children:"Daily"})]}),"\n",(0,l.jsxs)(n.li,{children:["If bits 33\u201339 = ",(0,l.jsx)(n.code,{children:"0111110"})," \u2192 ",(0,l.jsx)(n.code,{children:"Every weekday"})]}),"\n",(0,l.jsxs)(n.li,{children:["Else if any DOW bit set \u2192 ",(0,l.jsx)(n.code,{children:"Days of week: Su Mo ..."})]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Weeks of month"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["If bits 40\u201344 are ",(0,l.jsx)(n.strong,{children:"some but not all"})," \u2192 ",(0,l.jsx)(n.code,{children:"Weeks: 1st 3rd ..."})]}),"\n",(0,l.jsxs)(n.li,{children:["If ",(0,l.jsx)(n.code,{children:"00000"})," or ",(0,l.jsx)(n.code,{children:"11111"})," \u2192 omit (runs every week or none specified)"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Months"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["If bits 45\u201356 = ",(0,l.jsx)(n.code,{children:"111111111111"})," \u2192 ",(0,l.jsx)(n.code,{children:", Every Month"})]}),"\n",(0,l.jsxs)(n.li,{children:["Else if any set \u2192 ",(0,l.jsx)(n.code,{children:"in Jan Feb ..."})]}),"\n",(0,l.jsxs)(n.li,{children:["Else (none set) \u2192 treated as every month via NVL default ",(0,l.jsx)(n.code,{children:", Every Month"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["All pieces concatenate in a single ",(0,l.jsx)(n.code,{children:"CASE"})," using ",(0,l.jsx)(n.code,{children:"DECODE"}),", ",(0,l.jsx)(n.code,{children:"NVL"}),", and ",(0,l.jsx)(n.code,{children:"NVL2"}),", with minimal whitespace trimming."]}),"\n",(0,l.jsx)(n.h2,{id:"performance-notes",children:"Performance notes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Early ",(0,l.jsx)(n.code,{children:"WHERE"})," filters in ",(0,l.jsx)(n.code,{children:"base"})," cut rows before decoding."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dates"})," CTE uses a single ",(0,l.jsx)(n.code,{children:"CONNECT BY LEVEL <= 31"})," cross join and ",(0,l.jsx)(n.code,{children:"LISTAGG"}),"; no row-by-row functions."]}),"\n",(0,l.jsxs)(n.li,{children:["Character operations (",(0,l.jsx)(n.code,{children:"SUBSTR"}),"/",(0,l.jsx)(n.code,{children:"INSTR"}),") are cheap and avoid conversions."]}),"\n",(0,l.jsx)(n.li,{children:"Status meaning joined once; no scalar subqueries."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"extensibility",children:"Extensibility"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["To handle locale text, replace hard-coded day and month tokens with a small lookup CTE and ",(0,l.jsx)(n.code,{children:"LISTAGG"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["If duplicate status meanings appear (e.g., ",(0,l.jsx)(n.code,{children:"@Normal"}),"), wrap ",(0,l.jsx)(n.code,{children:"FND_LOOKUP_VALUES_VL"})," with a ",(0,l.jsx)(n.code,{children:"ROW_NUMBER()"})," filter to select one meaning per code.","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"or filter out the duplicated values using some metadata col from Lookup table"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}}}]);